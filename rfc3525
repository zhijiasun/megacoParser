DescriptorName=<someID>{parm=value, parm=value, ...}.

Mux = H.221{ MyT3/1/2, MyT3/2/13, MyT3/3/6, MyT3/21/22}
Context=1{AuditValue=t1/1{Audit{Packages}}}

Context=1{AuditValue=t1/1{Packages{aaa,bbb}}}

Context=*{AuditValue=t2/*{Audit{Packages}}}

Context=1{AuditValue=t2/1{Packages{ccc,ddd}}},
Context=2{AuditValue=t2/2{Packages{ccc,ddd}}}

Context=*{W-AuditValue=t1/*{Audit{Packages}}}
Context=*{W-AuditValue=t1/*{Packages{aaa,bbb}}}

digitMap = (digitString / LWSP "(" LWSP digitStringList LWSP ")"
               LWSP)

digitStringList = digitString *( LWSP "|" LWSP digitString )
digitString = 1*(digitStringElement)
digitStringElement = digitPosition [DOT]
digitPosition = digitMapLetter / digitMapRange
digitMapRange = ("x" / (LWSP "[" LWSP digitLetter LWSP "]" LWSP))
digitLetter = *((DIGIT "-" DIGIT) /digitMapLetter)
digitMapLetter = DIGIT           ;digits 0-9
             / %x41-4B / %x61-6B    ;a-k and A-K
             / "L"/ "S"       ;Inter-event timers
                                 ;(long, short)
             / "Z"            ;Long duration event
DOT = %x2E ; "."
LWSP = *(WSP / COMMENT / EOL)
WSP = SP / HTAB
COMMENT = ";" *(SafeChar / RestChar / WSP) EOL
EOL = (CR [LF]) / LF
SP = %x20
HTAB = %x09
CR = %x0D
LF = %x0A
SafeChar = DIGIT / ALPHA / "+" / "-" / "&" / "!" / "_" / "/" /
         "'" / "?" / "@" / "^" / "`" / "~" / "*" / "$" / "\" /
         "(" / ")" / "%" / "."
RestChar = ";" / "[" / "]" / "{" / "}" / ":" / "," / "#" /
         "<" / ">" / "=" / %x22
DIGIT = %x30-39       ; digits 0 through 9
ALPHA = %x41-5A / %x61-7A; A-Z, a-z

pathNAME = ["*"] NAME *("/" / "*"/ ALPHA / DIGIT /"_" / "$" )
                            ["@" pathDomainName ]
pathDomainName       = (ALPHA / DIGIT / "*" )
                            *63(ALPHA / DIGIT / "-"
NAME = ALPHA *63(ALPHA / DIGIT / "_" )
megacoMessage        = LWSP [authenticationHeader SEP ] message

authenticationHeader = AuthToken EQUAL SecurityParmIndex COLON
                          SequenceNum COLON AuthData

SecurityParmIndex    = "0x" 8(HEXDIG)
SequenceNum          = "0x" 8(HEXDIG)
AuthData             = "0x" 24*64(HEXDIG)

message            = MegacopToken SLASH Version SEP mId SEP
messageBody          = ( errorDescriptor / transactionList )
transactionList      = 1*( transactionRequest / transactionReply /
                          transactionPending / transactionResponseAck )
transactionPending   = PendingToken EQUAL TransactionID LBRKT
transactionResponseAck = ResponseAckToken LBRKT transactionAck
                  *(COMMA transactionAck) RBRKT
transactionAck = transactionID / (transactionID "-" transactionID)

transactionRequest   = TransToken EQUAL TransactionID LBRKT
                          actionRequest *(COMMA actionRequest) RBRKT

actionRequest        = CtxToken EQUAL ContextID LBRKT ((
                          contextRequest [COMMA  commandRequestList])
                          / commandRequestList) RBRKT

contextRequest    = ((contextProperties [COMMA contextAudit])
               / contextAudit)

contextProperties    = contextProperty *(COMMA contextProperty)

contextProperty    = (topologyDescriptor / priority / EmergencyToken)

contextAudit   = ContextAuditToken LBRKT contextAuditProperties
                         *(COMMA contextAuditProperties) RBRKT

contextAuditProperties = ( TopologyToken / EmergencyToken /
                              PriorityToken )

commandRequestList = ["O-"] ["W-"] commandRequest
                        *(COMMA ["O-"] ["W-"]commandRequest)

commandRequest      = ( ammRequest / subtractRequest / auditRequest /
                           notifyRequest / serviceChangeRequest)

transactionReply     = ReplyToken EQUAL TransactionID LBRKT
                     [ ImmAckRequiredToken COMMA]
                   ( errorDescriptor / actionReplyList ) RBRKT

actionReplyList      = actionReply *(COMMA actionReply )
actionReply          = CtxToken EQUAL ContextID LBRKT
                     ( errorDescriptor / commandReply ) /
            (commandReply COMMA errorDescriptor) ) RBRKT

commandReply      = (( contextProperties [COMMA commandReplyList] ) /
                           commandReplyList )


commandReplyList     = commandReplys *(COMMA commandReplys )

commandReplys        = (serviceChangeReply / auditReply / ammsReply /
                           notifyReply )

ammRequest           = (AddToken / MoveToken / ModifyToken ) EQUAL
                          TerminationID [LBRKT ammParameter *(COMMA
                          ammParameter) RBRKT]

ammParameter         = (mediaDescriptor / modemDescriptor /
                           muxDescriptor / eventsDescriptor /
                           signalsDescriptor / digitMapDescriptor /
                           eventBufferDescriptor / auditDescriptor)

ammsReply            = (AddToken / MoveToken / ModifyToken /
                           SubtractToken ) EQUAL TerminationID [ LBRKT
                           terminationAudit RBRKT ]

subtractRequest      =  SubtractToken EQUAL TerminationID
                           [ LBRKT auditDescriptor RBRKT]

auditRequest         =  (AuditValueToken / AuditCapToken ) EQUAL
                           TerminationID LBRKT auditDescriptor RBRKT

auditReply           = (AuditValueToken / AuditCapToken )
                          ( contextTerminationAudit  / auditOther)

auditOther           = EQUAL TerminationID [LBRKT
                          terminationAudit RBRKT]

terminationAudit = auditReturnParameter *(COMMA auditReturnParameter)

contextTerminationAudit = EQUAL CtxToken ( terminationIDList /
                          LBRKT errorDescriptor RBRKT )

auditReturnParameter = (mediaDescriptor / modemDescriptor /
                           muxDescriptor / eventsDescriptor /
                           signalsDescriptor / digitMapDescriptor /
                      observedEventsDescriptor / eventBufferDescriptor /
                           statisticsDescriptor / packagesDescriptor /
                            errorDescriptor / auditItem)

auditDescriptor      = AuditToken LBRKT [ auditItem
                          *(COMMA auditItem) ] RBRKT

notifyRequest        = NotifyToken EQUAL TerminationID
                          LBRKT ( observedEventsDescriptor
                                [ COMMA errorDescriptor ] ) RBRKT

notifyReply          = NotifyToken EQUAL TerminationID
                          [ LBRKT errorDescriptor RBRKT ]

serviceChangeRequest = ServiceChangeToken EQUAL TerminationID
                          LBRKT serviceChangeDescriptor RBRKT

serviceChangeReply   = ServiceChangeToken EQUAL TerminationID
                          [LBRKT (errorDescriptor /
                          serviceChangeReplyDescriptor) RBRKT]

errorDescriptor   = ErrorToken EQUAL ErrorCode
                       LBRKT [quotedString] RBRKT

ErrorCode            = 1*4(DIGIT) ; could be extended

TransactionID        = UINT32

mId                  = (( domainAddress / domainName )
                          [":" portNumber]) / mtpAddress / deviceName

domainName           = "<" (ALPHA / DIGIT) *63(ALPHA / DIGIT / "-" /
                          ".") ">"
deviceName           = pathNAME

ContextID            = (UINT32 / "*" / "-" / "$")

domainAddress        = "[" (IPv4address / IPv6address) "]"
IPv6address          = hexpart [ ":" IPv4address ]
IPv4address          = V4hex DOT V4hex DOT V4hex DOT V4hex
V4hex                = 1*3(DIGIT) ; "0".."255"
hexpart           = hexseq "::" [ hexseq ] / "::" [ hexseq ] / hexseq
hexseq               = hex4 *( ":" hex4)
hex4                 = 1*4HEXDIG

portNumber           = UINT16

mtpAddress           = MTPToken LBRKT 4*8 (HEXDIG) RBRKT

terminationIDList  = LBRKT TerminationID *(COMMA TerminationID) RBRKT

pathNAME      = ["*"] NAME *("/" / "*"/ ALPHA / DIGIT /"_" / "$" )
                          ["@" pathDomainName ]

pathDomainName       = (ALPHA / DIGIT / "*" )
                          *63(ALPHA / DIGIT / "-" / "*" / ".")

TerminationID        = "ROOT" / pathNAME / "$" / "*"

mediaDescriptor = MediaToken LBRKT mediaParm *(COMMA mediaParm) RBRKT

mediaParm            = (streamParm / streamDescriptor /
                           terminationStateDescriptor)

streamParm           = ( localDescriptor / remoteDescriptor /
                           localControlDescriptor )

streamDescriptor     = StreamToken EQUAL StreamID LBRKT streamParm
                          *(COMMA streamParm) RBRKT

localControlDescriptor = LocalControlToken LBRKT localParm
                            *(COMMA localParm) RBRKT

localParm = ( streamMode / propertyParm / reservedValueMode
                  / reservedGroupMode )
reservedValueMode    = ReservedValueToken EQUAL ( "ON" / "OFF" )
reservedGroupMode    = ReservedGroupToken EQUAL ( "ON" / "OFF" )

streamMode           = ModeToken EQUAL streamModes

streamModes     = (SendonlyToken / RecvonlyToken / SendrecvToken /
                          InactiveToken / LoopbackToken )

propertyParm         = pkgdName parmValue
parmValue            = (EQUAL alternativeValue/ INEQUAL VALUE)
alternativeValue     = ( VALUE
                  / LSBRKT VALUE *(COMMA VALUE) RSBRKT
                   ; sublist (i.e., A AND B AND ...)
                  / LBRKT VALUE *(COMMA VALUE) RBRKT
                   ; alternatives (i.e., A OR B OR ...)
                  /  LSBRKT VALUE COLON VALUE RSBRKT )
                   ; range

INEQUAL              = LWSP (">" / "<" / "#" ) LWSP
LSBRKT               = LWSP "[" LWSP
RSBRKT               = LWSP "]" LWSP

localDescriptor      = LocalToken LBRKT octetString RBRKT

remoteDescriptor     = RemoteToken LBRKT octetString RBRKT

eventBufferDescriptor= EventBufferToken [ LBRKT eventSpec
                          *( COMMA eventSpec) RBRKT ]

eventSpec      = pkgdName [ LBRKT eventSpecParameter
                *(COMMA eventSpecParameter) RBRKT ]
eventSpecParameter   = (eventStream / eventOther)

eventBufferControl     = BufferToken EQUAL ( "OFF" / LockStepToken )

terminationStateDescriptor = TerminationStateToken LBRKT
              terminationStateParm *( COMMA terminationStateParm ) RBRKT

terminationStateParm = (propertyParm / serviceStates /
                           eventBufferControl )
serviceStates        = ServiceStatesToken EQUAL ( TestToken /
                          OutOfSvcToken / InSvcToken )

muxDescriptor        = MuxToken EQUAL MuxType  terminationIDList

MuxType              = ( H221Token / H223Token / H226Token / V76Token
                           / extensionParameter )

StreamID             = UINT16
pkgdName     = (PackageName SLASH ItemID) ;specific item
                / (PackageName SLASH "*") ;all items in package
                / ("*" SLASH "*") ; all items supported by the MG
PackageName          = NAME
ItemID               = NAME

eventsDescriptor     = EventsToken [ EQUAL RequestID LBRKT
                        requestedEvent *( COMMA requestedEvent ) RBRKT ]

requestedEvent       = pkgdName [ LBRKT eventParameter
                          *( COMMA eventParameter ) RBRKT ]

eventParameter       = ( embedWithSig / embedNoSig / KeepActiveToken
                            /eventDM / eventStream / eventOther )

embedWithSig         = EmbedToken LBRKT signalsDescriptor
                            [COMMA embedFirst ] RBRKT
embedNoSig        = EmbedToken LBRKT embedFirst RBRKT

embedFirst      = EventsToken [ EQUAL RequestID LBRKT
              secondRequestedEvent *(COMMA secondRequestedEvent) RBRKT ]

secondRequestedEvent = pkgdName [ LBRKT secondEventParameter
                          *( COMMA secondEventParameter ) RBRKT ]

secondEventParameter = ( embedSig / KeepActiveToken / eventDM /
                            eventStream / eventOther )

embedSig  = EmbedToken LBRKT signalsDescriptor RBRKT

eventStream          = StreamToken EQUAL StreamID
eventOther           = eventParameterName parmValue

eventParameterName   = NAME

eventDM              = DigitMapToken EQUAL(( digitMapName ) /
                          (LBRKT digitMapValue RBRKT ))

signalsDescriptor    = SignalsToken LBRKT [ signalParm
                          *(COMMA signalParm)] RBRKT

signalParm           = signalList / signalRequest

signalRequest        = signalName [ LBRKT sigParameter
                          *(COMMA sigParameter) RBRKT ]

signalList           = SignalListToken EQUAL signalListId LBRKT
                          signalListParm *(COMMA signalListParm) RBRKT

signalListId         = UINT16

signalListParm       = signalRequest

signalName           = pkgdName
sigParameter = sigStream / sigSignalType / sigDuration / sigOther
               / notifyCompletion / KeepActiveToken
sigStream            = StreamToken EQUAL StreamID
sigOther             = sigParameterName parmValue
sigParameterName     = NAME
sigSignalType        = SignalTypeToken EQUAL signalType
signalType           = (OnOffToken / TimeOutToken / BriefToken)
sigDuration          = DurationToken EQUAL UINT16
notifyCompletion     = NotifyCompletionToken EQUAL (LBRKT
            notificationReason *(COMMA notificationReason) RBRKT)

notificationReason   = ( TimeOutToken / InterruptByEventToken
                        / InterruptByNewSignalsDescrToken
                        / OtherReasonToken )
observedEventsDescriptor = ObservedEventsToken EQUAL RequestID
                      LBRKT observedEvent *(COMMA observedEvent) RBRKT

observedEvent        = [ TimeStamp LWSP COLON] LWSP
                          pkgdName [ LBRKT observedEventParameter
                          *(COMMA observedEventParameter) RBRKT ]
observedEventParameter = eventStream / eventOther

RequestID            = ( UINT32 / "*" )

modemDescriptor      = ModemToken (( EQUAL modemType) /
                      (LSBRKT modemType *(COMMA modemType) RSBRKT))
                     [ LBRKT propertyParm *(COMMA propertyParm) RBRKT ]


modemType            = (V32bisToken / V22bisToken / V18Token /
                           V22Token / V32Token / V34Token / V90Token /
                         V91Token / SynchISDNToken / extensionParameter)

digitMapDescriptor  = DigitMapToken EQUAL
                        ( ( LBRKT digitMapValue RBRKT ) /
                        (digitMapName [ LBRKT digitMapValue RBRKT ]) )
digitMapName        = NAME
digitMapValue       = ["T" COLON Timer COMMA] ["S" COLON Timer COMMA]
                         ["L" COLON Timer COMMA] digitMap
Timer               = 1*2DIGIT
digitMap = (digitString /
               LWSP "(" LWSP digitStringList LWSP ")" LWSP)
digitStringList   = digitString *( LWSP "|" LWSP digitString )
digitString       = 1*(digitStringElement)
digitStringElement = digitPosition [DOT]
digitPosition     = digitMapLetter / digitMapRange
digitMapRange     = ("x" / (LWSP "[" LWSP digitLetter LWSP "]" LWSP))
digitLetter       = *((DIGIT "-" DIGIT ) / digitMapLetter)
digitMapLetter    = DIGIT   ;Basic event symbols
               / %x41-4B / %x61-6B ; a-k, A-K
               / "L" / "S"   ;Inter-event timers (long, short)
               / "Z"         ;Long duration modifier

auditItem            = ( MuxToken / ModemToken / MediaToken /
                           SignalsToken / EventBufferToken /
                           DigitMapToken / StatsToken / EventsToken /
                           ObservedEventsToken / PackagesToken )
serviceChangeDescriptor = ServicesToken LBRKT serviceChangeParm
                            *(COMMA serviceChangeParm) RBRKT

serviceChangeParm    = (serviceChangeMethod / serviceChangeReason /
                          serviceChangeDelay / serviceChangeAddress /
                          serviceChangeProfile / extension / TimeStamp /
                          serviceChangeMgcId / serviceChangeVersion )

serviceChangeReplyDescriptor = ServicesToken LBRKT
                        servChgReplyParm *(COMMA servChgReplyParm) RBRKT

servChgReplyParm     = (serviceChangeAddress / serviceChangeMgcId /
                          serviceChangeProfile / serviceChangeVersion /
                          TimeStamp)
serviceChangeMethod  = MethodToken EQUAL (FailoverToken /
                          ForcedToken / GracefulToken / RestartToken /
                          DisconnectedToken / HandOffToken /
                          extensionParameter)
serviceChangeReason  = ReasonToken  EQUAL VALUE
serviceChangeDelay   = DelayToken   EQUAL UINT32
serviceChangeAddress = ServiceChangeAddressToken EQUAL ( mId /
                          portNumber )
serviceChangeMgcId   = MgcIdToken   EQUAL mId
serviceChangeProfile = ProfileToken EQUAL NAME SLASH Version
serviceChangeVersion = VersionToken EQUAL Version
extension            = extensionParameter parmValue

packagesDescriptor   = PackagesToken LBRKT packagesItem
                          *(COMMA packagesItem) RBRKT

Version              = 1*2(DIGIT)
packagesItem         = NAME "-" UINT16
TimeStamp            = Date "T" Time ; per ISO 8601:1988
Date                 = 8(DIGIT)
Time                 = 8(DIGIT)
statisticsDescriptor = StatsToken LBRKT statisticsParameter
                         *(COMMA statisticsParameter ) RBRKT

statisticsParameter  = pkgdName [EQUAL VALUE]

topologyDescriptor   = TopologyToken LBRKT topologyTriple
                          *(COMMA topologyTriple) RBRKT
topologyTriple       = terminationA COMMA
                          terminationB COMMA topologyDirection
terminationA         = TerminationID
terminationB         = TerminationID
topologyDirection    = BothwayToken / IsolateToken / OnewayToken

priority             = PriorityToken EQUAL UINT16

extensionParameter   = "X"  ("-" / "+") 1*6(ALPHA / DIGIT)

octetString          = *(nonEscapeChar)
nonEscapeChar        = ( "\}" / %x01-7C / %x7E-FF )
quotedString         = DQUOTE *(SafeChar / RestChar/ WSP) DQUOTE

UINT16               = 1*5(DIGIT)  ; %x0-FFFF
UINT32               = 1*10(DIGIT) ; %x0-FFFFFFFF

NAME                 = ALPHA *63(ALPHA / DIGIT / "_" )
VALUE                = quotedString / 1*(SafeChar)
SafeChar             = DIGIT / ALPHA / "+" / "-" / "&" /
                          "!" / "_" / "/" / "\'" / "?" / "@" /
                          "^" / "`" / "~" / "*" / "$" / "\" /
                          "(" / ")" / "%" / "|" / "."

EQUAL                = LWSP %x3D LWSP ; "="
COLON                = %x3A           ; ":"
LBRKT                = LWSP %x7B LWSP ; "{"
RBRKT                = LWSP %x7D LWSP ; "}"
COMMA                = LWSP %x2C LWSP ; ","
DOT                  = %x2E           ; "."
SLASH                = %x2F           ; "/"
ALPHA                = %x41-5A / %x61-7A ; A-Z / a-z
DIGIT                = %x30-39         ; 0-9
DQUOTE               = %x22            ; " (Double Quote)
HEXDIG               = ( DIGIT / "A" / "B" / "C" / "D" / "E" / "F" )
SP                   = %x20        ; space
HTAB                 = %x09        ; horizontal tab
CR                   = %x0D        ; Carriage return
LF                   = %x0A        ; linefeed
LWSP                 = *( WSP / COMMENT / EOL )
EOL                  = (CR [LF] / LF )
WSP                  = SP / HTAB ; white space
SEP                  = ( WSP / EOL / COMMENT) LWSP
COMMENT              = ";" *(SafeChar/ RestChar / WSP / %x22) EOL
RestChar            = ";" / "[" / "]" / "{" / "}" / ":" / "," / "#" /
                          "<" / ">" / "="

AddToken                   = ("Add"                   / "A")
AuditToken                 = ("Audit"                 / "AT")
AuditCapToken              = ("AuditCapability"       / "AC")
AuditValueToken            = ("AuditValue"            / "AV")
AuthToken                  = ("Authentication"        / "AU")
BothwayToken               = ("Bothway"               / "BW")
BriefToken                 = ("Brief"                 / "BR")
BufferToken                = ("Buffer"                / "BF")
CtxToken                   = ("Context"               / "C")
ContextAuditToken       = ("ContextAudit"    / "CA")
DigitMapToken              = ("DigitMap"              / "DM")
DisconnectedToken          = ("Disconnected"          / "DC")
DelayToken                 = ("Delay"                 / "DL")
DurationToken              = ("Duration"              / "DR")
EmbedToken                 = ("Embed"                 / "EM")
EmergencyToken             = ("Emergency"             / "EG")
ErrorToken                 = ("Error"                 / "ER")
EventBufferToken           = ("EventBuffer"           / "EB")
EventsToken                = ("Events"                / "E")
FailoverToken              = ("Failover"              / "FL")
ForcedToken                = ("Forced"                / "FO")
GracefulToken              = ("Graceful"              / "GR")
H221Token                  = ("H221" )
H223Token                  = ("H223" )
H226Token                  = ("H226" )
HandOffToken               = ("HandOff"               / "HO")
ImmAckRequiredToken        = ("ImmAckRequired"        / "IA")
InactiveToken              = ("Inactive"              / "IN")
IsolateToken               = ("Isolate"               / "IS")
InSvcToken                 = ("InService"             / "IV")
InterruptByEventToken      = ("IntByEvent"            / "IBE")
KeepActiveToken            = ("KeepActive"            / "KA")
LocalToken                 = ("Local"                 / "L")
LocalControlToken          = ("LocalControl"          / "O")
LockStepToken              = ("LockStep"              / "SP")
LoopbackToken              = ("Loopback"              / "LB")
MediaToken                 = ("Media"                 / "M")
MegacopToken               = ("MEGACO"                / "!")
MethodToken                = ("Method"                / "MT")
MgcIdToken                 = ("MgcIdToTry"            / "MG")
ModeToken                  = ("Mode"                  / "MO")
ModifyToken                = ("Modify"                / "MF")
ModemToken                 = ("Modem"                 / "MD")
MoveToken                  = ("Move"                  / "MV")
MTPToken                   = ("MTP")
MuxToken                   = ("Mux"                   / "MX")
NotifyToken                = ("Notify"                / "N")
NotifyCompletionToken      = ("NotifyCompletion"      / "NC")
ObservedEventsToken        = ("ObservedEvents"        / "OE")
OnewayToken                = ("Oneway"                / "OW")
OnOffToken                 = ("OnOff"                 / "OO")
OtherReasonToken           = ("OtherReason"           / "OR")
OutOfSvcToken              = ("OutOfService"          / "OS")
PackagesToken              = ("Packages"              / "PG")
PendingToken               = ("Pending"               / "PN")
PriorityToken              = ("Priority"              / "PR")
ProfileToken               = ("Profile"               / "PF")
ReasonToken                = ("Reason"                / "RE")
RecvonlyToken              = ("ReceiveOnly"           / "RC")
ReplyToken                 = ("Reply"                 / "P")
RestartToken               = ("Restart"               / "RS")
RemoteToken                = ("Remote"                / "R")
ReservedGroupToken         = ("ReservedGroup"         / "RG")
ReservedValueToken         = ("ReservedValue"         / "RV")
SendonlyToken              = ("SendOnly"              / "SO")
SendrecvToken              = ("SendReceive"           / "SR")
ServicesToken              = ("Services"              / "SV")
ServiceStatesToken         = ("ServiceStates"         / "SI")
ServiceChangeToken         = ("ServiceChange"         / "SC")
ServiceChangeAddressToken  = ("ServiceChangeAddress"  / "AD")
SignalListToken            = ("SignalList"            / "SL")
SignalsToken               = ("Signals"               / "SG")
SignalTypeToken            = ("SignalType"            / "SY")
StatsToken                 = ("Statistics"            / "SA")
StreamToken                = ("Stream"                / "ST")
SubtractToken              = ("Subtract"              / "S")
SynchISDNToken             = ("SynchISDN"             / "SN")
TerminationStateToken      = ("TerminationState"      / "TS")
TestToken                  = ("Test"                  / "TE")
TimeOutToken               = ("TimeOut"               / "TO")
TopologyToken              = ("Topology"              / "TP")
TransToken                 = ("Transaction"           / "T")
ResponseAckToken           = ("TransactionResponseAck" / "K")
V18Token                   = ("V18")
V22Token                   = ("V22")
V22bisToken                = ("V22b")
V32Token                   = ("V32")
V32bisToken                = ("V32b")
V34Token                   = ("V34")
V76Token                   = ("V76")
V90Token                   = ("V90")
V91Token                   = ("V91")
VersionToken               = ("Version"               / "V")

CLP = 0)
CLP = 0 + 1)
Context = - {
ServiceChange = ROOT {Services {
Method=Restart,
ServiceChangeAddress=55555, Profile=ResGW/1}
Context = - {ServiceChange = ROOT {
        Services {ServiceChangeAddress=55555, Profile=ResGW/1} } } }

Context = - {
Modify = A4444 {
               Media { Stream = 1 {
                        LocalControl {
Mode = SendReceive,
Events = 2222 {al/of(strict=state)}
Reply = 9999 {
Context = - {Modify = A4444} }

Context = - {
Notify = A4444 {ObservedEvents =2222 {
            19990729T22000000:al/of(init=false)}}
Context = - {Notify = A4444} }
Context = - {
Modify = A4444 {
Events = 2223 {
                   al/on(strict=state), dd/ce {DigitMap=Dialplan0}
DigitMap= Dialplan0{ (0| 00|[1-
Context = - {Modify = A4444} }

Context = - {
Notify = A4444 {ObservedEvents =2223 {
            19990729T22010001:dd/ce{ds="916135551212",Meth=UM}}}
Context = - {Notify = A4444} }


Context = $ {
Add = A4444,
Add = $ {
              Media {
Stream = 1 {
                     LocalControl {
Mode = ReceiveOnly,

a=ptime:30 v=0 c=IN IP4 $ m=audio $ RTP/AVP 0
                     }
                }
             }
          }
       } }


      NOTE - The MGC states its preferred parameter values as a series
      of SDP blocks in  Local.  The MG fills in the Local Descriptor in
      the Reply.

Context = 2000 {
Add = A4444,
Add=A4445{
            Media {
Stream = 1 {
                    Local { v=0 o=- 2890844526 2890842807 IN IP4
Context = $ {
Add = A5555  { Media {
Stream = 1 {
                    LocalControl {Mode = SendReceive} }},
Events=1234{al/of(strict=state)},
               Signals {al/ri}

               },
Add  = $ {Media {
Stream = 1 {
                    LocalControl {
Mode = SendReceive,
a=ptime:30
                    },
                    Remote { v=0 c=IN IP4 124.124.124.222 m=audio 2222
Context = 5000 {
Add = A5555,
Add = A5556{
            Media {
Stream = 1 {
                   Local { v=0 o=- 7736844526 7736842807 IN IP4
Context = 2000 {
Modify = A4444 {
         Signals {cg/rt}
Modify = A4445 {
          Media {
Stream = 1 {
                   Remote { v=0 o=- 7736844526 7736842807 IN IP4
Context = 2000 {Modify = A4444, Modify = A4445} }

Context = 5000 {

Notify = A5555 {ObservedEvents =1234 {
            19990729T22020002:al/of(init=false)}}
Context = - {Notify = A5555} }

Context = 5000 {
Modify = A5555 {
Events = 1235 {al/on(strict=state)},
Context = 5000 {Modify = A4445} }

Context = 2000 {
Modify = A4445 {
            Media {
Stream = 1 {
                  LocalControl {
Mode=SendReceive

Modify = A4444 {
            Signals { }
Context = 2000 {Modify = A4445, Modify = A4444}}

Context = - {AuditValue = A5556{
         Audit{Media, DigitMap, Events, Signals, Packages, Statistics }}
Context = - { AuditValue = A5556 {
             Media {
                TerminationState { ServiceStates = InService,
Buffer = OFF },
Stream = 1 {
                    LocalControl { Mode = SendReceive,
                       nt/jit=40 },
                    Local { v=0 o=- 7736844526 7736842807 IN IP4
Context = 5000 {
Notify = A5555 {ObservedEvents =1235 {
             19990729T24020002:al/on(init=false)}
Context = - {Notify = A5555} }

Context = 5000 {
Subtract = A5555 {Audit{Statistics}},
Subtract = A5556 {Audit{Statistics}}
Context = 5000 {
Subtract = A5555 {
             Statistics {
                nt/os=45123, ; Octets Sent
                nt/dur=40 ; in seconds
                }
          },
Subtract = A5556 {
             Statistics {
                rtp/ps=1245, ; packets sent
                nt/os=62345, ; octets sent
                rtp/pr=780, ; packets received
                nt/or=45123, ; octets received
                rtp/pl=10, ;  % packets lost
                rtp/jit=27,
                rtp/delay=48 ; average latency
             }
